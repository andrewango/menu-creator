
> restaurant-menu@0.1.0 test
> react-scripts test --coverage

PASS src/components/RatingFeature.test.tsx
FAIL src/components/SelectRole.test.tsx
  ‚óè SelectRole tests ‚Ä∫ There is initially 2 options

    expect(received).toEqual(expected) // deep equality

    Expected: 2
    Received: 3

      22 |         );
      23 |         const options = screen.getByRole("combobox") as HTMLSelectElement;
    > 24 |         expect(options.options.length).toEqual(2);
         |                                        ^
      25 |     });
      26 |     test("SelectRole is initially Owner", () => {
      27 |         render(

      at Object.<anonymous> (src/components/SelectRole.test.tsx:24:40)

FAIL src/components/NavBar.test.tsx
  ‚óè NavBar tests ‚Ä∫ edit foods button is displayed initially

    TestingLibraryElementError: Unable to find an element with the text: /edit food/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"navbar css-mz9qt7"[39m
          [33mdata-testid[39m=[32m"bar"[39m
        [36m>[39m
          [36m<a[39m
            [33mhref[39m=[32m"/"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"navbtn css-15ro776"[39m
            [36m>[39m
              [0mmenu[0m
            [36m</span>[39m
          [36m</a>[39m
          [36m<a[39m
            [33mhref[39m=[32m"/AboutUs"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"navbtn css-0"[39m
            [36m>[39m
              [0mabout us[0m
            [36m</span>[39m
          [36m</a>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</body>[39m

      37 |             </BrowserRouter>
      38 |         );
    > 39 |         expect(screen.getByText(/edit food/i)).toBeInTheDocument();
         |                       ^
      40 |     });
      41 |     test("edit users button is displayed initially", () => {
      42 |         render(

      at Object.getElementError (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/components/NavBar.test.tsx:39:23)

  ‚óè NavBar tests ‚Ä∫ edit users button is displayed initially

    TestingLibraryElementError: Unable to find an element with the text: /edit users/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<nav[39m
          [33mclass[39m=[32m"navbar css-mz9qt7"[39m
          [33mdata-testid[39m=[32m"bar"[39m
        [36m>[39m
          [36m<a[39m
            [33mhref[39m=[32m"/"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"navbtn css-15ro776"[39m
            [36m>[39m
              [0mmenu[0m
            [36m</span>[39m
          [36m</a>[39m
          [36m<a[39m
            [33mhref[39m=[32m"/AboutUs"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"navbtn css-0"[39m
            [36m>[39m
              [0mabout us[0m
            [36m</span>[39m
          [36m</a>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</body>[39m

      45 |             </BrowserRouter>
      46 |         );
    > 47 |         expect(screen.getByText(/edit users/i)).toBeInTheDocument();
         |                       ^
      48 |     });
      49 |     test("edit users disapperas when admin is selected", async () => {
      50 |         render(

      at Object.getElementError (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/components/NavBar.test.tsx:47:23)

PASS src/components/DeliveryDropDown.test.tsx
FAIL src/components/SearchBar.test.tsx
  ‚óè Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ‚Ä¢ If you need a custom transformation specify a "transform" option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /home/runner/work/restaurant-menu/restaurant-menu/node_modules/react-dnd/dist/index.js:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){export * from './core/index.js';
                                                                                      ^^^^^^

    SyntaxError: Unexpected token 'export'

      11 | } from "@chakra-ui/react";
      12 | import { GrStar } from "react-icons/gr";
    > 13 | import { useDrag } from "react-dnd";
         | ^
      14 | import { GetCurrentUser } from "./SelectRole";
      15 | import { userProps } from "../interfaces/User";
      16 | import "./EditFoodStyles.css";

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1728:14)
      at Object.<anonymous> (src/components/FoodItem.tsx:13:1)
      at Object.<anonymous> (src/components/ItemListUI.tsx:4:1)
      at Object.<anonymous> (src/components/SearchBar.tsx:4:1)
      at Object.<anonymous> (src/components/SearchBar.test.tsx:3:1)

FAIL src/App.test.tsx
  ‚óè Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ‚Ä¢ If you need a custom transformation specify a "transform" option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /home/runner/work/restaurant-menu/restaurant-menu/node_modules/react-dnd/dist/index.js:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){export * from './core/index.js';
                                                                                      ^^^^^^

    SyntaxError: Unexpected token 'export'

      14 | } from "@chakra-ui/react";
      15 |
    > 16 | import { useDrag, useDrop } from "react-dnd";
         | ^
      17 | import { foodProps } from "../interfaces/Food";
      18 | import foodList from "../data/foods.json";
      19 | import EditFoodTabs from "./EditFoodTabs";

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1728:14)
      at Object.<anonymous> (src/components/EditFoodList.tsx:16:1)
      at Object.<anonymous> (src/pages/EditFood.tsx:6:1)
      at Object.<anonymous> (src/App.tsx:2:1)
      at Object.<anonymous> (src/App.test.tsx:3:1)
      at TestScheduler.scheduleTests (node_modules/@jest/core/build/TestScheduler.js:333:13)
      at runJest (node_modules/@jest/core/build/runJest.js:404:19)
      at _run10000 (node_modules/@jest/core/build/cli/index.js:320:7)
      at runCLI (node_modules/@jest/core/build/cli/index.js:173:3)

-----------------------|---------|----------|---------|---------|-------------------
File                   | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
-----------------------|---------|----------|---------|---------|-------------------
All files              |     6.7 |     3.49 |     6.7 |    6.86 |                   
 src                   |       0 |      100 |       0 |       0 |                   
  App.tsx              |       0 |      100 |       0 |       0 | 16                
 src/components        |    7.51 |     3.78 |    7.78 |    7.71 |                   
  AddDeleteUsers.tsx   |       0 |        0 |       0 |       0 | 24-201            
  CheckoutList.tsx     |       0 |        0 |       0 |       0 | 37-382            
  DeliveryDropDown.tsx |   33.33 |        0 |    37.5 |   33.33 | 59-84,101,165     
  EditFoodList.tsx     |       0 |        0 |       0 |       0 | 26-165            
  EditFoodMenu.tsx     |       0 |        0 |       0 |       0 | 8-41              
  EditFoodTabs.tsx     |       0 |        0 |       0 |       0 | 40-252            
  EditFoodUI.tsx       |       0 |        0 |       0 |       0 | 28-140            
  FoodItem.tsx         |       0 |        0 |       0 |       0 | 19-118            
  ItemListUI.tsx       |       0 |        0 |       0 |       0 | 11-31             
  NavBar.tsx           |    87.5 |    27.27 |      75 |    87.5 | 14                
  RatingFeature.tsx    |      80 |       50 |   66.66 |      80 | 21                
  RemoveFood.tsx       |       0 |        0 |       0 |       0 | 21-105            
  SearchBar.tsx        |       0 |        0 |       0 |       0 | 17-258            
  SelectRole.tsx       |   46.87 |       30 |      50 |   48.38 | 58-68,76-83,92    
 src/interfaces        |       0 |        0 |       0 |       0 |                   
  CustomerList.ts      |       0 |        0 |       0 |       0 |                   
  EmployeeList.ts      |       0 |        0 |       0 |       0 |                   
  Food.ts              |       0 |        0 |       0 |       0 |                   
  ListOfCustomers.ts   |       0 |        0 |       0 |       0 |                   
  OwnerFoodItem.ts     |       0 |        0 |       0 |       0 |                   
  OwnerList.ts         |       0 |        0 |       0 |       0 |                   
  User.ts              |       0 |        0 |       0 |       0 |                   
 src/pages             |       0 |        0 |       0 |       0 |                   
  AboutUs.tsx          |       0 |      100 |       0 |       0 | 14                
  AddFood.tsx          |       0 |        0 |       0 |       0 | 23-257            
  EditFood.tsx         |       0 |        0 |       0 |       0 | 12                
  EditUsers.tsx        |       0 |      100 |       0 |       0 | 8                 
  Landing.tsx          |       0 |      100 |       0 |       0 | 12                
  ManageFoods.tsx      |       0 |      100 |       0 |       0 | 8-34              
  OwnerLanding.tsx     |       0 |        0 |       0 |       0 | 17-49             
  UserStats.tsx        |       0 |        0 |       0 |       0 | 25-95             
-----------------------|---------|----------|---------|---------|-------------------
Test Suites: 4 failed, 2 passed, 6 total
Tests:       3 failed, 20 passed, 23 total
Snapshots:   0 total
Time:        8.459 s
Ran all test suites.
